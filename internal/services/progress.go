package services

import (
	"context"
	"english-bot/internal/database"
	"fmt"
	"math"
	"time"
)

// ProgressService –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
type ProgressService struct {
	db *database.PostgresDB
}

// UserStats –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
type UserStats struct {
	TotalExercises       int       // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
	CorrectExercises     int       // –ü—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
	SuccessRate          float64   // –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
	TotalConversations   int       // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏–∞–ª–æ–≥–æ–≤
	TotalMessages        int       // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
	CurrentStreak        int       // –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è –¥–Ω–µ–π
	LongestStreak        int       // –°–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è —Å–µ—Ä–∏—è
	LastActivity         time.Time // –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
	DaysActive           int       // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
	StrongestSkills      []string  // –°–∞–º—ã–µ —Å–∏–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏
	WeakestSkills        []string  // –°–∞–º—ã–µ —Å–ª–∞–±—ã–µ –Ω–∞–≤—ã–∫–∏
	RecommendedExercises []string  // –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
}

// NewProgressService —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
func NewProgressService(db *database.PostgresDB) *ProgressService {
	return &ProgressService{
		db: db,
	}
}

// GetUserStats –ø–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (s *ProgressService) GetUserStats(userID int64) (*UserStats, error) {
	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
	progress, err := s.db.GetUserProgress(context.Background(), userID)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %w", err)
	}

	// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
	successRate := 0.0
	if progress.TotalExercises > 0 {
		successRate = float64(progress.CorrectExercises) / float64(progress.TotalExercises) * 100
	}

	// –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	stats := &UserStats{
		TotalExercises:     progress.TotalExercises,
		CorrectExercises:   progress.CorrectExercises,
		SuccessRate:        successRate,
		TotalConversations: progress.TotalConversations,
		TotalMessages:      progress.TotalMessages,
		CurrentStreak:      progress.CurrentStreak,
		LongestStreak:      progress.LongestStreak,
		LastActivity:       progress.LastActivityDate,
	}

	// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
	// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ë–î
	stats.DaysActive = progress.CurrentStreak

	// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–ª—å–Ω—ã–µ –∏ —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ë–î –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
	stats.StrongestSkills = []string{"Vocabulary", "Reading"}
	stats.WeakestSkills = []string{"Grammar", "Listening"}

	// –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–∞–±—ã—Ö —Å—Ç–æ—Ä–æ–Ω
	stats.RecommendedExercises = s.getRecommendedExercises(stats.WeakestSkills)

	return stats, nil
}

// getRecommendedExercises —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–∞–±—ã—Ö —Å—Ç–æ—Ä–æ–Ω
func (s *ProgressService) getRecommendedExercises(weakestSkills []string) []string {
	recommendations := make([]string, 0, len(weakestSkills))

	for _, skill := range weakestSkills {
		switch skill {
		case "Grammar":
			recommendations = append(recommendations, "Practice verb tenses", "Work on conditional sentences")
		case "Vocabulary":
			recommendations = append(recommendations, "Learn new words daily", "Review vocabulary with flashcards")
		case "Listening":
			recommendations = append(recommendations, "Listen to English podcasts", "Watch English videos with subtitles")
		case "Speaking":
			recommendations = append(recommendations, "Practice conversations", "Record and listen to yourself speaking")
		case "Reading":
			recommendations = append(recommendations, "Read English articles", "Practice reading comprehension")
		case "Writing":
			recommendations = append(recommendations, "Write short essays", "Practice writing emails")
		}
	}

	return recommendations
}

// CalculateLevelProgress —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ç–µ–∫—É—â–µ–º —É—Ä–æ–≤–Ω–µ
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (0-100)
func (s *ProgressService) CalculateLevelProgress(userID int64, level string) (float64, error) {
	// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
	// –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º

	// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	stats, err := s.GetUserStats(userID)
	if err != nil {
		return 0, err
	}

	// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
	// –ó–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
	exercises := float64(stats.TotalExercises)
	successRate := stats.SuccessRate

	// –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
	var minExercises float64
	switch level {
	case "A1":
		minExercises = 50
	case "A2":
		minExercises = 100
	case "B1":
		minExercises = 150
	case "B2":
		minExercises = 200
	case "C1":
		minExercises = 250
	default:
		minExercises = 300
	}

	// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
	exerciseProgress := math.Min(exercises/minExercises, 1.0) * 70 // 70% –æ—Ç –æ–±—â–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
	rateProgress := (successRate / 100) * 30                       // 30% –æ—Ç –æ–±—â–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞

	// –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
	totalProgress := exerciseProgress + rateProgress

	// –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –¥–≤—É—Ö –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
	return math.Round(totalProgress*100) / 100, nil
}

// IsReadyForNextLevel –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –≥–æ—Ç–æ–≤ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
func (s *ProgressService) IsReadyForNextLevel(userID int64, currentLevel string) (bool, string, error) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ —Ç–µ–∫—É—â–µ–º —É—Ä–æ–≤–Ω–µ
	progress, err := s.CalculateLevelProgress(userID, currentLevel)
	if err != nil {
		return false, "", err
	}

	// –ï—Å–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –±–æ–ª–µ–µ 85%, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ—Ç–æ–≤ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
	if progress >= 85 {
		nextLevel := getNextLevel(currentLevel)
		return true, nextLevel, nil
	}

	return false, "", nil
}

// getNextLevel –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
func getNextLevel(currentLevel string) string {
	switch currentLevel {
	case "A1":
		return "A2"
	case "A2":
		return "B1"
	case "B1":
		return "B2"
	case "B2":
		return "C1"
	case "C1":
		return "C2"
	default:
		return "C2"
	}
}

// FormatProgressMessage —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (s *ProgressService) FormatProgressMessage(stats *UserStats, level string) string {
	// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ —Ç–µ–∫—É—â–µ–º —É—Ä–æ–≤–Ω–µ
	levelProgress, _ := s.CalculateLevelProgress(0, level) // userID 0 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞

	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	message := fmt.Sprintf("üìä *Your Learning Progress*\n\n"+
		"*Current Level:* %s (%.0f%% completed)\n\n"+
		"*Statistics:*\n"+
		"‚Ä¢ Exercises completed: %d\n"+
		"‚Ä¢ Success rate: %.1f%%\n"+
		"‚Ä¢ Conversations: %d\n"+
		"‚Ä¢ Messages exchanged: %d\n"+
		"‚Ä¢ Learning streak: %d days\n"+
		"‚Ä¢ Longest streak: %d days\n\n"+
		"*Your Strengths:*\n",
		level, levelProgress,
		stats.TotalExercises,
		stats.SuccessRate,
		stats.TotalConversations,
		stats.TotalMessages,
		stats.CurrentStreak,
		stats.LongestStreak)

	// –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
	for _, skill := range stats.StrongestSkills {
		message += fmt.Sprintf("‚úÖ %s\n", skill)
	}

	message += "\n*Areas to Improve:*\n"

	// –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
	for _, skill := range stats.WeakestSkills {
		message += fmt.Sprintf("‚ö†Ô∏è %s\n", skill)
	}

	message += "\n*Recommendations:*\n"

	// –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
	for _, rec := range stats.RecommendedExercises {
		message += fmt.Sprintf("‚Ä¢ %s\n", rec)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–æ—Ç–æ–≤ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
	isReady, nextLevel, _ := s.IsReadyForNextLevel(0, level) // userID 0 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
	if isReady {
		message += fmt.Sprintf("\nüéâ *Congratulations!* You're ready to advance to level %s!\n", nextLevel)
	}

	return message
}
