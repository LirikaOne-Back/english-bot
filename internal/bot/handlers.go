package bot

import (
	"context"
	"encoding/json"
	"english-bot/internal/database"
	"english-bot/internal/services"
	"fmt"
	"log/slog"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// State –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const (
	StateIdle          = "idle"
	StateChat          = "chat"
	StateGrammarCheck  = "grammar_check"
	StateExercise      = "exercise"
	StateExerciseReply = "exercise_reply"
)

// Handler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
type Handler struct {
	bot             *tgbotapi.BotAPI
	db              *database.PostgresDB
	openAI          *services.OpenAIService
	languageTool    *services.LanguageToolService
	exerciseService *services.ExerciseService
	progressService *services.ProgressService
}

// NewHandler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
func NewHandler(bot *tgbotapi.BotAPI, db *database.PostgresDB, openAI *services.OpenAIService) *Handler {
	return &Handler{
		bot:    bot,
		db:     db,
		openAI: openAI,
	}
}

// SetLanguageToolService —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ—Ä–≤–∏—Å LanguageTool
func (h *Handler) SetLanguageToolService(service *services.LanguageToolService) {
	h.languageTool = service
}

// SetExerciseService —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ—Ä–≤–∏—Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
func (h *Handler) SetExerciseService(service *services.ExerciseService) {
	h.exerciseService = service
}

// SetProgressService —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
func (h *Handler) SetProgressService(service *services.ProgressService) {
	h.progressService = service
}

// HandleUpdate –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
func (h *Handler) HandleUpdate(ctx context.Context, update tgbotapi.Update) {
	// –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
	if update.Message == nil {
		return
	}

	slog.Info("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ",
		"from", update.Message.From.UserName,
		"text", update.Message.Text,
	)

	// –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
	user, err := h.getOrCreateUser(ctx, update.Message.From)
	if err != nil {
		slog.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "error", err)
		h.sendErrorMessage(update.Message.Chat.ID)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	session, err := h.db.GetOrCreateUserSession(ctx, user.ID)
	if err != nil {
		slog.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏", "error", err)
		h.sendErrorMessage(update.Message.Chat.ID)
		return
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
	if update.Message.IsCommand() {
		h.handleCommand(ctx, update, user, session)
		return
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
	h.handleMessageByState(ctx, update, user, session)
}

// getOrCreateUser –ø–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
func (h *Handler) getOrCreateUser(ctx context.Context, tgUser *tgbotapi.User) (*database.User, error) {
	user, err := h.db.GetUserByTelegramID(ctx, tgUser.ID)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %w", err)
	}

	if user == nil {
		// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		newUser := database.User{
			TelegramID:   tgUser.ID,
			Username:     tgUser.UserName,
			FirstName:    tgUser.FirstName,
			LastName:     tgUser.LastName,
			LanguageCode: tgUser.LanguageCode,
			EnglishLevel: "A1", // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é A1
		}

		user, err = h.db.CreateUser(ctx, newUser)
		if err != nil {
			return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %w", err)
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		h.db.UpdateUserStreak(ctx, user.ID)
	}

	return user, nil
}

// handleCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
func (h *Handler) handleCommand(ctx context.Context, update tgbotapi.Update, user *database.User, session *database.UserSession) {
	chatID := update.Message.Chat.ID
	command := update.Message.Command()

	switch command {
	case "start":
		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ idle
		session.State = StateIdle
		h.db.UpdateUserSession(ctx, *session)

		msg := tgbotapi.NewMessage(chatID,
			"üëã *Welcome to English Learning Bot!*\n\n"+
				"I'm here to help you learn English in an interactive and fun way. You can:\n"+
				"‚Ä¢ Chat with me in English\n"+
				"‚Ä¢ Check your grammar\n"+
				"‚Ä¢ Get personalized exercises\n"+
				"‚Ä¢ Track your progress\n\n"+
				"Use /help to see all available commands.")
		msg.ParseMode = "Markdown"
		h.bot.Send(msg)

	case "help":
		msg := tgbotapi.NewMessage(chatID,
			"*Available commands:*\n\n"+
				"üìù */chat* - Start a conversation in English\n"+
				"‚úÖ */check* - Check grammar of your sentence\n"+
				"üìö */exercise* - Get a new exercise\n"+
				"üìä */progress* - Show your learning progress\n"+
				"‚öôÔ∏è */settings* - Change your preferences")
		msg.ParseMode = "Markdown"
		h.bot.Send(msg)

	case "chat":
		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞
		session.State = StateChat
		h.db.UpdateUserSession(ctx, *session)

		// –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
		conversation, err := h.db.StartConversation(ctx, user.ID, "general", user.EnglishLevel)
		if err != nil {
			slog.Error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞", "error", err)
			h.sendErrorMessage(chatID)
			return
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–∏–∞–ª–æ–≥–∞ –≤ —Å–µ—Å—Å–∏–∏
		session.ConversationID = fmt.Sprintf("%d", conversation.ID)
		h.db.UpdateUserSession(ctx, *session)

		msg := tgbotapi.NewMessage(chatID,
			"üó£Ô∏è *Let's practice English!*\n\n"+
				"I'll be your conversation partner. Feel free to talk about anything you want.\n"+
				"Just type your message in English, and I'll respond.")
		msg.ParseMode = "Markdown"
		h.bot.Send(msg)

	case "check":
		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏
		session.State = StateGrammarCheck
		h.db.UpdateUserSession(ctx, *session)

		msg := tgbotapi.NewMessage(chatID,
			"‚úÖ *Grammar Check Mode*\n\n"+
				"Send me a sentence or paragraph in English, and I'll check it for grammar mistakes.\n"+
				"I'll explain any errors and suggest corrections.")
		msg.ParseMode = "Markdown"
		h.bot.Send(msg)

	case "exercise":
		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
		session.State = StateExercise

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ç–∏–ø —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è (–ø–æ–∫–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤–æ–µ)
		contextData := map[string]string{
			"exerciseType": "grammar",
		}

		contextJSON, _ := json.Marshal(contextData)
		session.ContextData = contextJSON
		h.db.UpdateUserSession(ctx, *session)

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
		msg := tgbotapi.NewMessage(chatID, "üîÑ Generating exercise for your level, please wait...")
		waitMsg, _ := h.bot.Send(msg)

		// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ OpenAI
		exerciseText, err := h.openAI.GenerateExercise("grammar", user.EnglishLevel)
		if err != nil {
			slog.Error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è", "error", err)
			h.sendErrorMessage(chatID)
			return
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –≤ –ë–î
		exercise := database.Exercise{
			Type:    "grammar",
			Level:   user.EnglishLevel,
			Content: exerciseText,
			// –û—Ç–≤–µ—Ç –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω –ø–æ–∑–∂–µ –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π —Å –æ–∂–∏–¥–∞–µ–º—ã–º –æ—Ç–≤–µ—Ç–æ–º
		}

		savedExercise, err := h.db.SaveExercise(ctx, exercise)
		if err != nil {
			slog.Error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è", "error", err)
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ—Å—Å–∏–∏, –≤–∫–ª—é—á–∞—è ID —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
		contextData["exerciseID"] = fmt.Sprintf("%d", savedExercise.ID)
		contextJSON, _ = json.Marshal(contextData)
		session.ContextData = contextJSON
		session.State = StateExerciseReply
		h.db.UpdateUserSession(ctx, *session)

		// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ"
		deleteMsg := tgbotapi.NewDeleteMessage(chatID, waitMsg.MessageID)
		h.bot.Request(deleteMsg)

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
		exerciseMsg := tgbotapi.NewMessage(chatID,
			"üìö *Exercise*\n\n"+exerciseText+"\n\n"+
				"Type your answer when ready.")
		exerciseMsg.ParseMode = "Markdown"
		h.bot.Send(exerciseMsg)

	case "progress":
		progress, err := h.db.GetUserProgress(ctx, user.ID)
		if err != nil {
			slog.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞", "error", err)
			h.sendErrorMessage(chatID)
			return
		}

		// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
		correctPercentage := 0
		if progress.TotalExercises > 0 {
			correctPercentage = (progress.CorrectExercises * 100) / progress.TotalExercises
		}

		msg := tgbotapi.NewMessage(chatID, fmt.Sprintf(
			"üìä *Your Learning Progress*\n\n"+
				"‚Ä¢ English Level: *%s*\n"+
				"‚Ä¢ Exercises Completed: *%d*\n"+
				"‚Ä¢ Correct Answers: *%d (%d%%)*\n"+
				"‚Ä¢ Conversations: *%d*\n"+
				"‚Ä¢ Messages Exchanged: *%d*\n"+
				"‚Ä¢ Current Streak: *%d days*\n"+
				"‚Ä¢ Longest Streak: *%d days*\n\n"+
				"Keep up the good work! üåü",
			user.EnglishLevel,
			progress.TotalExercises,
			progress.CorrectExercises,
			correctPercentage,
			progress.TotalConversations,
			progress.TotalMessages,
			progress.CurrentStreak,
			progress.LongestStreak,
		))
		msg.ParseMode = "Markdown"
		h.bot.Send(msg)

	default:
		msg := tgbotapi.NewMessage(chatID, "Unknown command. Use /help to see available commands.")
		h.bot.Send(msg)
	}
}

// handleMessageByState –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
func (h *Handler) handleMessageByState(ctx context.Context, update tgbotapi.Update, user *database.User, session *database.UserSession) {
	chatID := update.Message.Chat.ID
	text := update.Message.Text

	switch session.State {
	case StateChat:
		// –ü–æ–ª—É—á–∞–µ–º ID –±–µ—Å–µ–¥—ã –∏–∑ —Å–µ—Å—Å–∏–∏
		conversationID := 0
		fmt.Sscanf(session.ConversationID, "%d", &conversationID)

		if conversationID == 0 {
			// –ï—Å–ª–∏ ID –±–µ—Å–µ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
			conversation, err := h.db.StartConversation(ctx, user.ID, "general", user.EnglishLevel)
			if err != nil {
				slog.Error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞", "error", err)
				h.sendErrorMessage(chatID)
				return
			}
			conversationID = int(conversation.ID)
			session.ConversationID = fmt.Sprintf("%d", conversationID)
			h.db.UpdateUserSession(ctx, *session)
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		userMessage := database.ConversationMessage{
			ConversationID: int64(conversationID),
			Role:           "user",
			Content:        text,
		}
		h.db.AddConversationMessage(ctx, userMessage)

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—á–∞—Ç–∞–Ω–∏–∏
		typingMsg := tgbotapi.NewChatAction(chatID, tgbotapi.ChatTyping)
		h.bot.Request(typingMsg)

		// –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		systemPrompt := fmt.Sprintf("You are an English tutor speaking with a student at %s level. Be encouraging, correct major mistakes, and adapt your language to their level. Keep responses concise and natural. Respond in English only.", user.EnglishLevel)

		// –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç OpenAI
		response, err := h.openAI.GenerateResponse(text, systemPrompt)
		if err != nil {
			slog.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI", "error", err)
			h.sendErrorMessage(chatID)
			return
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
		botMessage := database.ConversationMessage{
			ConversationID: int64(conversationID),
			Role:           "bot",
			Content:        response,
		}
		h.db.AddConversationMessage(ctx, botMessage)

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
		msg := tgbotapi.NewMessage(chatID, response)
		h.bot.Send(msg)

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		h.db.UpdateUserStreak(ctx, user.ID)

	case StateGrammarCheck:
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
		waitMsg := tgbotapi.NewMessage(chatID, "üîç Checking grammar...")
		sentMsg, _ := h.bot.Send(waitMsg)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–º–º–∞—Ç–∏–∫—É —á–µ—Ä–µ–∑ OpenAI
		result, err := h.openAI.CheckGrammar(text)
		if err != nil {
			slog.Error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏", "error", err)
			h.sendErrorMessage(chatID)
			return
		}

		// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–º–º–∞—Ç–∏–∫—É"
		deleteMsg := tgbotapi.NewDeleteMessage(chatID, sentMsg.MessageID)
		h.bot.Request(deleteMsg)

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
		msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("‚úÖ *Grammar Check Result*\n\n%s", result))
		msg.ParseMode = "Markdown"
		h.bot.Send(msg)

		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
		session.State = StateIdle
		h.db.UpdateUserSession(ctx, *session)

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		h.db.UpdateUserStreak(ctx, user.ID)

	case StateExerciseReply:
		// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
		var contextData map[string]string
		if err := json.Unmarshal(session.ContextData, &contextData); err != nil {
			slog.Error("–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–µ—Å—Å–∏–∏", "error", err)
			h.sendErrorMessage(chatID)
			return
		}

		exerciseID := 0
		fmt.Sscanf(contextData["exerciseID"], "%d", &exerciseID)

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–≤–µ—Ç–∞
		waitMsg := tgbotapi.NewMessage(chatID, "üîç Checking your answer...")
		sentMsg, _ := h.bot.Send(waitMsg)

		// –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ OpenAI
		// –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
		isCorrect := strings.Contains(strings.ToLower(text), "correct") // —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∞

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		userExercise := database.UserExercise{
			UserID:     user.ID,
			ExerciseID: int64(exerciseID),
			UserAnswer: text,
			IsCorrect:  isCorrect,
		}
		h.db.SaveUserExercise(ctx, userExercise)

		// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç"
		deleteMsg := tgbotapi.NewDeleteMessage(chatID, sentMsg.MessageID)
		h.bot.Request(deleteMsg)

		var feedbackMsg string
		if isCorrect {
			feedbackMsg = "üéâ *Correct!*\n\nGreat job! Your answer is correct."
		} else {
			feedbackMsg = "‚ùå *Not quite right*\n\nLet me explain:\n\n" +
				"Your answer has some issues. Here's a better way to answer:\n" +
				"[–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç –∑–¥–µ—Å—å]"
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
		msg := tgbotapi.NewMessage(chatID, feedbackMsg)
		msg.ParseMode = "Markdown"
		h.bot.Send(msg)

		// –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
		nextMsg := tgbotapi.NewMessage(chatID, "Would you like another exercise? Use /exercise to get one.")
		h.bot.Send(nextMsg)

		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
		session.State = StateIdle
		h.db.UpdateUserSession(ctx, *session)

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		h.db.UpdateUserStreak(ctx, user.ID)

	default:
		// –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
		msg := tgbotapi.NewMessage(chatID,
			"I'm not sure what you want to do. Here are some options:\n\n"+
				"‚Ä¢ Use /chat to practice speaking English\n"+
				"‚Ä¢ Use /check to check grammar\n"+
				"‚Ä¢ Use /exercise to get a learning exercise\n"+
				"‚Ä¢ Use /progress to see your stats")
		h.bot.Send(msg)

		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
		session.State = StateIdle
		h.db.UpdateUserSession(ctx, *session)
	}
}

// sendErrorMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
func (h *Handler) sendErrorMessage(chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "Sorry, something went wrong. Please try again later.")
	h.bot.Send(msg)
}
